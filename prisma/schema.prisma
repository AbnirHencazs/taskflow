// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project[] // Projects owned by the user
  tasks     Task[]   // Tasks created by the user
  projectMemberships ProjectMember[] // Projects where user is a member

  @@index([email])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  members     ProjectMember[] // New relation for team members

  @@index([ownerId])
}

model Task {
  id            String   @id @default(cuid())
  title         String
  description   String?
  status        String   @default("TODO") // TODO, IN_PROGRESS, DONE
  priority      String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate       DateTime?
  estimatedTime Int?     // in minutes
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id])

  @@index([projectId])
  @@index([creatorId])
}

// New model for project members
model ProjectMember {
  id        String   @id @default(cuid())
  role      String   @default("MEMBER") // MEMBER, ADMIN, VIEWER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
} 